/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
/**
 * From version 5.0 CsvExportComponent will be deprecated,
 * and from version 6.0 moved to CsvExportComponent plugin
 */
export class CsvExportComponent {
    /**
     * @return {?}
     */
    exportCsv() {
        /** @type {?} */
        const data = this.data;
        /** @type {?} */
        let csvContent = 'data:text/csv;charset=utf-8,';
        /** @type {?} */
        let dataString = '';
        /** @type {?} */
        const x = [];
        /** @type {?} */
        const keys = Object.keys(this.data[0]);
        data.forEach((row, index) => {
            x[index] = [];
            keys.forEach((i) => {
                if (row.hasOwnProperty(i)) {
                    if (typeof row[i] === 'object') {
                        row[i] = 'Object'; // so far just change object to "Object" string
                    }
                    x[index].push(row[i]);
                }
            });
        });
        csvContent += keys + '\n';
        x.forEach((row, index) => {
            dataString = row.join(',');
            csvContent += index < data.length ? dataString + '\n' : dataString;
        });
        /** @type {?} */
        const encodedUri = encodeURI(csvContent);
        /** @type {?} */
        const link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'my_data.csv');
        link.click();
    }
}
CsvExportComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-csv-export',
                template: `
    <a (click)="exportCsv()" class="ngx-menu-item">
      CSV export
    </a>`
            }] }
];
CsvExportComponent.propDecorators = {
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    CsvExportComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWV4cG9ydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Nzdi1leHBvcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQVVqRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBR3RCLFNBQVM7O2NBQ1IsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJOztZQUNsQixVQUFVLEdBQUcsOEJBQThCOztZQUMzQyxVQUFVLEdBQUcsRUFBRTs7Y0FDYixDQUFDLEdBQVUsRUFBRTs7Y0FDYixJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDMUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDakIsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUN6QixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsRUFBRTt3QkFDOUIsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLCtDQUErQztxQkFDbkU7b0JBQ0QsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDdkI7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsVUFBVSxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDMUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUN2QixVQUFVLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUMzQixVQUFVLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQztRQUNyRSxDQUFDLENBQUMsQ0FBQzs7Y0FDRyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQzs7Y0FDbEMsSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNmLENBQUM7OztZQTVDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtnQkFDMUIsUUFBUSxFQUFFOzs7U0FHSDthQUNSOzs7bUJBT0UsS0FBSzs7OztJQUFOLGtDQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtY3N2LWV4cG9ydCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGEgKGNsaWNrKT1cImV4cG9ydENzdigpXCIgY2xhc3M9XCJuZ3gtbWVudS1pdGVtXCI+XG4gICAgICBDU1YgZXhwb3J0XG4gICAgPC9hPmAsXG59KVxuXG4vKipcbiAqIEZyb20gdmVyc2lvbiA1LjAgQ3N2RXhwb3J0Q29tcG9uZW50IHdpbGwgYmUgZGVwcmVjYXRlZCxcbiAqIGFuZCBmcm9tIHZlcnNpb24gNi4wIG1vdmVkIHRvIENzdkV4cG9ydENvbXBvbmVudCBwbHVnaW5cbiAqL1xuZXhwb3J0IGNsYXNzIENzdkV4cG9ydENvbXBvbmVudCB7XG4gIEBJbnB1dCgpIGRhdGE7XG5cbiAgcHVibGljIGV4cG9ydENzdigpIHtcbiAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhO1xuICAgIGxldCBjc3ZDb250ZW50ID0gJ2RhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCwnO1xuICAgIGxldCBkYXRhU3RyaW5nID0gJyc7XG4gICAgY29uc3QgeDogYW55W10gPSBbXTtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5kYXRhWzBdKTtcbiAgICBkYXRhLmZvckVhY2goKHJvdywgaW5kZXgpID0+IHtcbiAgICAgIHhbaW5kZXhdID0gW107XG4gICAgICBrZXlzLmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgaWYgKHJvdy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgICAgIGlmICh0eXBlb2Ygcm93W2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcm93W2ldID0gJ09iamVjdCc7IC8vIHNvIGZhciBqdXN0IGNoYW5nZSBvYmplY3QgdG8gXCJPYmplY3RcIiBzdHJpbmdcbiAgICAgICAgICB9XG4gICAgICAgICAgeFtpbmRleF0ucHVzaChyb3dbaV0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGNzdkNvbnRlbnQgKz0ga2V5cyArICdcXG4nO1xuICAgIHguZm9yRWFjaCgocm93LCBpbmRleCkgPT4ge1xuICAgICAgZGF0YVN0cmluZyA9IHJvdy5qb2luKCcsJyk7XG4gICAgICBjc3ZDb250ZW50ICs9IGluZGV4IDwgZGF0YS5sZW5ndGggPyBkYXRhU3RyaW5nICsgJ1xcbicgOiBkYXRhU3RyaW5nO1xuICAgIH0pO1xuICAgIGNvbnN0IGVuY29kZWRVcmkgPSBlbmNvZGVVUkkoY3N2Q29udGVudCk7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIGVuY29kZWRVcmkpO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsICdteV9kYXRhLmNzdicpO1xuXG4gICAgbGluay5jbGljaygpO1xuICB9XG59XG4iXX0=