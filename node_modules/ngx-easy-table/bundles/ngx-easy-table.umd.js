(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/cdk/drag-drop'), require('@angular/common'), require('@angular/core'), require('ngx-pagination')) :
    typeof define === 'function' && define.amd ? define('ngx-easy-table', ['exports', 'rxjs', 'rxjs/operators', '@angular/cdk/drag-drop', '@angular/common', '@angular/core', 'ngx-pagination'], factory) :
    (factory((global['ngx-easy-table'] = {}),global.rxjs,global.rxjs.operators,global.ng.cdk['drag-drop'],global.ng.common,global.ng.core,global.ngxPagination));
}(this, (function (exports,rxjs,operators,dragDrop,common,core,ngxPagination) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var STYLE = {
        TINY: 'tiny',
        BIG: 'big',
        NORMAL: 'normal',
    };
    /** @enum {string} */
    var THEME = {
        LIGHT: 'light',
        DARK: 'dark',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var Event = {
        onPagination: 'onPagination',
        onOrder: 'onOrder',
        onGlobalSearch: 'onGlobalSearch',
        onSearch: 'onSearch',
        onClick: 'onClick',
        onDoubleClick: 'onDoubleClick',
        onCheckboxSelect: 'onCheckboxSelect',
        onSelectAll: 'onSelectAll',
        onColumnResizeMouseDown: 'onColumnResizeMouseDown',
        onColumnResizeMouseUp: 'onColumnResizeMouseUp',
        onRowDrop: 'onRowDrop',
        onRowCollapsedShow: 'onRowCollapsedShow',
        onRowCollapsedHide: 'onRowCollapsedHide',
        onRowContextMenu: 'onRowContextMenu',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConfigService = /** @class */ (function () {
        function ConfigService() {
        }
        ConfigService.config = {
            searchEnabled: false,
            headerEnabled: true,
            orderEnabled: true,
            orderEventOnly: false,
            globalSearchEnabled: false,
            paginationEnabled: true,
            exportEnabled: false,
            clickEvent: true,
            selectRow: false,
            selectCol: false,
            selectCell: false,
            rows: 10,
            additionalActions: false,
            serverPagination: false,
            isLoading: false,
            detailsTemplate: false,
            groupRows: false,
            paginationRangeEnabled: true,
            collapseAllRows: false,
            checkboxes: false,
            resizeColumn: false,
            fixedColumnWidth: false,
            horizontalScroll: false,
            draggable: false,
            logger: false,
            showDetailsArrow: false,
            showContextMenu: false,
            persistState: false,
            paginationMaxSize: 5,
            tableLayout: {
                style: STYLE.NORMAL,
                theme: THEME.LIGHT,
                borderless: false,
                hover: true,
                striped: false,
            },
        };
        ConfigService.decorators = [
            { type: core.Injectable }
        ];
        return ConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UtilsService = /** @class */ (function () {
        function UtilsService() {
        }
        /**
         * @return {?}
         */
        UtilsService.randomId = /**
         * @return {?}
         */
            function () {
                // random pagination ID to avoid situation when we have more than 1 table at a page
                return Math.floor(Math.random() * 1000000);
            };
        UtilsService.decorators = [
            { type: core.Injectable }
        ];
        return UtilsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var API = {
        rowContextMenuClicked: 0,
        toolPanelClicked: 1,
    };
    API[API.rowContextMenuClicked] = 'rowContextMenuClicked';
    API[API.toolPanelClicked] = 'toolPanelClicked';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseComponent = /** @class */ (function () {
        function BaseComponent(cdr) {
            this.cdr = cdr;
            this.grouped = [];
            this.menuActive = false;
            this.isSelected = false;
            this.page = 1;
            this.count = null;
            this.rowContextMenuPosition = {
                top: null,
                left: null,
                value: null,
            };
            this.sortBy = {
                key: '',
                order: 'asc',
            };
            this.sortByIcon = {
                key: '',
                order: 'asc',
            };
            this.selectedDetailsTemplateRowId = new Set();
            this.loadingHeight = '30px';
            this.onSelectAllBinded = this.onSelectAll.bind(this);
            this.event = new core.EventEmitter();
            this.id = UtilsService.randomId();
        }
        Object.defineProperty(BaseComponent.prototype, "configuration", {
            get: /**
             * @return {?}
             */ function () {
                return this.config;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this.config = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BaseComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (!this.columns) {
                    console.error('[columns] property required!');
                }
                if (this.configuration) {
                    ConfigService.config = this.configuration;
                }
                this.config = ConfigService.config;
                if (this.api) {
                    this.bindApi();
                }
                this.limit = this.config.rows;
                if (this.groupRowsBy) {
                    this.doGroupRows();
                }
                this.doDecodePersistedState();
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.cdr.detectChanges();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BaseComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                /** @type {?} */
                var data = changes.data;
                /** @type {?} */
                var pagination = changes.pagination;
                /** @type {?} */
                var groupRowsBy = changes.groupRowsBy;
                this.toggleRowIndex = changes.toggleRowIndex;
                if (data && data.currentValue) {
                    this.doApplyData(data);
                }
                if (pagination && pagination.currentValue) {
                    this.count = pagination.currentValue.count;
                }
                if (groupRowsBy && groupRowsBy.currentValue) {
                    this.doGroupRows();
                }
                if (this.toggleRowIndex && this.toggleRowIndex.currentValue) {
                    /** @type {?} */
                    var row = this.toggleRowIndex.currentValue;
                    this.collapseRow(row.index);
                }
            };
        /**
         * @param {?} column
         * @return {?}
         */
        BaseComponent.prototype.isOrderEnabled = /**
         * @param {?} column
         * @return {?}
         */
            function (column) {
                /** @type {?} */
                var columnOrderEnabled = column.orderEnabled === undefined ? true : !!column.orderEnabled;
                return ConfigService.config.orderEnabled && columnOrderEnabled;
            };
        /**
         * @param {?} column
         * @return {?}
         */
        BaseComponent.prototype.orderBy = /**
         * @param {?} column
         * @return {?}
         */
            function (column) {
                if (typeof column.orderEnabled !== 'undefined' && !column.orderEnabled) {
                    return;
                }
                /** @type {?} */
                var key = column.key;
                if (!ConfigService.config.orderEnabled || key === '') {
                    return;
                }
                this.sortByIcon.key = key;
                if (this.sortByIcon.order === 'asc') {
                    this.sortByIcon.order = 'desc';
                }
                else {
                    this.sortByIcon.order = 'asc';
                }
                if (!ConfigService.config.orderEventOnly && !column.orderEventOnly) {
                    this.sortBy.key = this.sortByIcon.key;
                    this.sortBy.order = this.sortByIcon.order;
                }
                else {
                    this.sortBy.key = '';
                    this.sortBy.order = '';
                }
                if (!ConfigService.config.serverPagination) {
                    this.data = __spread(this.data);
                }
                /** @type {?} */
                var value = {
                    key: key,
                    order: this.sortByIcon.order,
                };
                this.emitEvent(Event.onOrder, value);
            };
        /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.onClick = /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
            function ($event, row, key, colIndex, rowIndex) {
                if (ConfigService.config.selectRow) {
                    this.selectedRow = rowIndex;
                }
                if (ConfigService.config.selectCol && colIndex) {
                    this.selectedCol = colIndex;
                }
                if (ConfigService.config.selectCell && colIndex) {
                    this.selectedRow = rowIndex;
                    this.selectedCol = colIndex;
                }
                if (ConfigService.config.clickEvent) {
                    /** @type {?} */
                    var value = {
                        event: $event,
                        row: row,
                        key: key,
                        rowId: rowIndex,
                        colId: colIndex,
                    };
                    this.emitEvent(Event.onClick, value);
                }
            };
        /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.onDoubleClick = /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
            function ($event, row, key, colIndex, rowIndex) {
                /** @type {?} */
                var value = {
                    event: $event,
                    row: row,
                    key: key,
                    rowId: rowIndex,
                    colId: colIndex,
                };
                this.emitEvent(Event.onDoubleClick, value);
            };
        /**
         * @param {?} $event
         * @param {?} row
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.onCheckboxSelect = /**
         * @param {?} $event
         * @param {?} row
         * @param {?} rowIndex
         * @return {?}
         */
            function ($event, row, rowIndex) {
                /** @type {?} */
                var value = {
                    event: $event,
                    row: row,
                    rowId: rowIndex,
                };
                this.emitEvent(Event.onCheckboxSelect, value);
            };
        /**
         * @return {?}
         */
        BaseComponent.prototype.onSelectAll = /**
         * @return {?}
         */
            function () {
                this.isSelected = !this.isSelected;
                this.emitEvent(Event.onSelectAll, this.isSelected);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BaseComponent.prototype.onSearch = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!ConfigService.config.serverPagination) {
                    this.term = $event;
                }
                this.emitEvent(Event.onSearch, $event);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BaseComponent.prototype.onGlobalSearch = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (!ConfigService.config.serverPagination) {
                    this.globalSearchTerm = $event;
                }
                this.emitEvent(Event.onGlobalSearch, $event);
            };
        /**
         * @param {?} pagination
         * @return {?}
         */
        BaseComponent.prototype.onPagination = /**
         * @param {?} pagination
         * @return {?}
         */
            function (pagination) {
                this.page = pagination.page;
                this.limit = pagination.limit;
                this.emitEvent(Event.onPagination, pagination);
            };
        /**
         * @private
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
        BaseComponent.prototype.emitEvent = /**
         * @private
         * @param {?} event
         * @param {?} value
         * @return {?}
         */
            function (event, value) {
                this.event.emit({ event: event, value: value });
                if (this.config.persistState) {
                    localStorage.setItem(event, JSON.stringify(value));
                }
                if (this.config.logger) {
                    // tslint:disable-next-line:no-console
                    console.log({ event: event, value: value });
                }
            };
        /**
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.collapseRow = /**
         * @param {?} rowIndex
         * @return {?}
         */
            function (rowIndex) {
                if (this.selectedDetailsTemplateRowId.has(rowIndex)) {
                    this.selectedDetailsTemplateRowId.delete(rowIndex);
                    this.emitEvent(Event.onRowCollapsedHide, rowIndex);
                }
                else {
                    this.selectedDetailsTemplateRowId.add(rowIndex);
                    this.emitEvent(Event.onRowCollapsedShow, rowIndex);
                }
            };
        /**
         * @private
         * @return {?}
         */
        BaseComponent.prototype.doDecodePersistedState = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.config.persistState) {
                    return;
                }
                /** @type {?} */
                var pagination = localStorage.getItem(Event.onPagination);
                /** @type {?} */
                var sort = localStorage.getItem(Event.onOrder);
                /** @type {?} */
                var search = localStorage.getItem(Event.onSearch);
                if (pagination) {
                    this.onPagination(JSON.parse(pagination));
                }
                if (sort) {
                    var _a = JSON.parse(sort), key = _a.key, order = _a.order;
                    this.sortBy.key = key;
                    this.sortBy.order = order;
                    this.data = __spread(this.data);
                }
                if (search) {
                    this.term = JSON.parse(search);
                }
            };
        /**
         * @private
         * @return {?}
         */
        BaseComponent.prototype.doGroupRows = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.grouped = [];
                rxjs.from(this.data).pipe(operators.groupBy(function (row) { return row[_this.groupRowsBy]; }), operators.flatMap(function (group) { return group.pipe(operators.reduce(function (acc, curr) { return __spread(acc, [curr]); }, [])); })).subscribe(function (row) { return _this.grouped.push(row); });
            };
        /**
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.isRowCollapsed = /**
         * @param {?} rowIndex
         * @return {?}
         */
            function (rowIndex) {
                if (this.config.collapseAllRows) {
                    return true;
                }
                return this.selectedDetailsTemplateRowId.has(rowIndex);
            };
        /**
         * @param {?} event
         * @param {?} th
         * @return {?}
         */
        BaseComponent.prototype.onMouseDown = /**
         * @param {?} event
         * @param {?} th
         * @return {?}
         */
            function (event, th) {
                if (!this.config.resizeColumn) {
                    return;
                }
                this.th = th;
                this.startOffset = th.offsetWidth - event.pageX;
                this.emitEvent(Event.onColumnResizeMouseDown, event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        BaseComponent.prototype.onMouseMove = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.config.resizeColumn) {
                    return;
                }
                if (this.th && this.th.style) {
                    this.th.style.width = this.startOffset + event.pageX + 'px';
                    this.th.style.cursor = 'col-resize';
                    this.th.style['user-select'] = 'none';
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        BaseComponent.prototype.onMouseUp = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (!this.config.resizeColumn) {
                    return;
                }
                this.emitEvent(Event.onColumnResizeMouseUp, event);
                this.th.style.cursor = 'default';
                this.th = undefined;
            };
        Object.defineProperty(BaseComponent.prototype, "isLoading", {
            get: /**
             * @return {?}
             */ function () {
                /** @type {?} */
                var table = ( /** @type {?} */(document.getElementById('table')));
                if (table && table.rows && table.rows.length > 3) {
                    this.getLoadingHeight(table.rows);
                }
                return this.config.isLoading;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} rows
         * @return {?}
         */
        BaseComponent.prototype.getLoadingHeight = /**
         * @param {?} rows
         * @return {?}
         */
            function (rows) {
                /** @type {?} */
                var searchEnabled = this.config.searchEnabled ? 1 : 0;
                /** @type {?} */
                var headerEnabled = this.config.headerEnabled ? 1 : 0;
                /** @type {?} */
                var borderTrHeight = 1;
                /** @type {?} */
                var borderDivHeight = 2;
                this.loadingHeight = (rows.length - searchEnabled - headerEnabled) * (rows[3].offsetHeight - borderTrHeight) - borderDivHeight + 'px';
            };
        /**
         * @param {?} column
         * @return {?}
         */
        BaseComponent.prototype.getColumnWidth = /**
         * @param {?} column
         * @return {?}
         */
            function (column) {
                if (column.width) {
                    return column.width;
                }
                return this.config.fixedColumnWidth ? 100 / this.columns.length + '%' : null;
            };
        /**
         * @param {?} column
         * @return {?}
         */
        BaseComponent.prototype.getColumnDefinition = /**
         * @param {?} column
         * @return {?}
         */
            function (column) {
                return column.searchEnabled || typeof column.searchEnabled === 'undefined';
            };
        Object.defineProperty(BaseComponent.prototype, "arrowDefinition", {
            get: /**
             * @return {?}
             */ function () {
                return this.config.showDetailsArrow || typeof this.config.showDetailsArrow === 'undefined';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
        BaseComponent.prototype.onRowContextMenu = /**
         * @param {?} $event
         * @param {?} row
         * @param {?} key
         * @param {?} colIndex
         * @param {?} rowIndex
         * @return {?}
         */
            function ($event, row, key, colIndex, rowIndex) {
                if (!this.config.showContextMenu) {
                    return;
                }
                $event.preventDefault();
                /** @type {?} */
                var value = {
                    event: $event,
                    row: row,
                    key: key,
                    rowId: rowIndex,
                    colId: colIndex,
                };
                this.rowContextMenuPosition = {
                    top: $event.y - 10 + "px",
                    left: $event.x - 10 + "px",
                    value: value,
                };
                this.emitEvent(Event.onRowContextMenu, value);
            };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        BaseComponent.prototype.doApplyData = /**
         * @private
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var column = this.columns.find(function (c) { return !!c.orderBy; });
                if (column) {
                    this.sortByIcon.order = (column.orderBy === 'asc') ? 'desc' : 'asc';
                    this.orderBy(column);
                }
                else {
                    this.data = __spread(data.currentValue);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        BaseComponent.prototype.onDrop = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.emitEvent(Event.onRowDrop, event);
                dragDrop.moveItemInArray(this.data, event.previousIndex, event.currentIndex);
            };
        /**
         * @private
         * @return {?}
         */
        BaseComponent.prototype.bindApi = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.api.subscribe(function (event) {
                    switch (event.type) {
                        case API.rowContextMenuClicked:
                            _this.rowContextMenuPosition = {
                                top: null,
                                left: null,
                                value: null,
                            };
                            break;
                        case API.toolPanelClicked:
                            // TODO
                            break;
                        default:
                            console.warn('unrecognized API value');
                    }
                });
            };
        BaseComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-table',
                        providers: [ConfigService, UtilsService],
                        template: "<div class=\"ngx-container\">\n  <div class=\"ngx-global-search\"\n       *ngIf=\"config.globalSearchEnabled\">\n    <global-search (globalUpdate)=\"onGlobalSearch($event)\"></global-search>\n  </div>\n  <table id=\"table\"\n         class=\"ngx-table\"\n         [class.ngx-table__table--tiny]=\"config.tableLayout.style === 'tiny'\"\n         [class.ngx-table__table--normal]=\"config.tableLayout.style === 'normal'\"\n         [class.ngx-table__table--big]=\"config.tableLayout.style === 'big'\"\n         [class.ngx-table__table--borderless]=\"config.tableLayout.borderless\"\n         [class.ngx-table__table--dark]=\"config.tableLayout.theme === 'dark'\"\n         [class.ngx-table__table--hoverable]=\"config.tableLayout.hover\"\n         [class.ngx-table__table--striped]=\"config.tableLayout.striped\"\n         [class.ngx-table__horizontal-scroll]=\"config.horizontalScroll && !isLoading\">\n    <thead>\n    <tr class=\"ngx-table__header\" *ngIf=\"config.headerEnabled\">\n      <th *ngIf=\"config.checkboxes\" width=\"3%\">\n        <ng-container\n          *ngIf=\"selectAllTemplate\"\n          [ngTemplateOutlet]=\"selectAllTemplate\"\n          [ngTemplateOutletContext]=\"{ $implicit: onSelectAllBinded }\">\n        </ng-container>\n        <label class=\"ngx-form-checkbox\" *ngIf=\"!selectAllTemplate\">\n          <input type=\"checkbox\" (change)=\"onSelectAll()\">\n          <i class=\"ngx-form-icon\" id=\"selectAllCheckbox\"></i>\n        </label>\n      </th>\n      <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n        <th class=\"ngx-table__header-cell\"\n            #th\n            [attr.width]=\"getColumnWidth(column)\"\n            (mousedown)=\"onMouseDown($event, th)\"\n            (mouseup)=\"onMouseUp($event)\"\n            (mousemove)=\"onMouseMove($event)\">\n          <div (click)=\"orderBy(column)\" [class.pointer]=\"isOrderEnabled(column)\">\n            <div class=\"ngx-table__header-title\">{{ column.title }}<span>&nbsp;</span>\n              <i *ngIf=\"sortByIcon.key === column.key && sortByIcon.order==='asc'\"\n                 [style.display]=\"config.orderEnabled?'':'none' \"\n                 class=\"ngx-icon ngx-icon-arrow-up\">\n              </i>\n              <i *ngIf=\"sortByIcon.key === column.key && sortByIcon.order==='desc'\"\n                 [style.display]=\"config.orderEnabled?'':'none' \"\n                 class=\"ngx-icon ngx-icon-arrow-down\">\n              </i>\n            </div>\n          </div>\n          <div class=\"ngx-table__column-resizer\" *ngIf=\"config.resizeColumn\"></div>\n        </th>\n      </ng-container>\n      <th *ngIf=\"config.additionalActions || config.detailsTemplate || config.collapseAllRows || config.groupRows\"\n          class=\"ngx-table__header-cell-additional-actions\">\n        <div class=\"ngx-dropdown ngx-active\"\n             *ngIf=\"config.additionalActions\"\n             [class.ngx-active]=\"menuActive\">\n          <a class=\"ngx-btn ngx-btn-link\" (click)=\"menuActive = !menuActive\">\n            <span class=\"ngx-icon ngx-icon-menu\"></span>\n          </a>\n          <ul class=\"ngx-menu ngx-table__table-menu\">\n            <li class=\"ngx-menu-item\">\n              <app-csv-export [data]=\"data\"\n                              *ngIf=\"config.exportEnabled\">\n              </app-csv-export>\n            </li>\n          </ul>\n        </div>\n      </th>\n    </tr>\n    <tr *ngIf=\"config.searchEnabled && !filtersTemplate\"\n        class=\"ngx-table__sort-header\">\n      <th *ngIf=\"config.checkboxes\"></th>\n      <ng-container *ngFor=\"let column of columns\">\n        <th>\n          <table-header\n            *ngIf=\"getColumnDefinition(column)\"\n            (update)=\"onSearch($event)\"\n            [column]=\"column\">\n          </table-header>\n        </th>\n      </ng-container>\n      <th *ngIf=\"config.additionalActions || config.detailsTemplate\"></th>\n    </tr>\n    <ng-container *ngIf=\"filtersTemplate\">\n      <tr>\n        <ng-container [ngTemplateOutlet]=\"filtersTemplate\">\n        </ng-container>\n      </tr>\n    </ng-container>\n    </thead>\n    <tbody *ngIf=\"data && !isLoading  && !config.draggable\">\n    <ng-container *ngIf=\"rowTemplate\">\n      <ul class=\"ngx-table__table-row-context-menu\"\n          [ngStyle]=\"{'position': 'absolute', 'top': rowContextMenuPosition.top, 'left': rowContextMenuPosition.left }\"\n          *ngIf=\"rowContextMenuPosition.top\">\n        <ng-container\n          [ngTemplateOutlet]=\"rowContextMenu\"\n          [ngTemplateOutletContext]=\"{ $implicit: rowContextMenuPosition.value}\">\n        </ng-container>\n      </ul>\n      <ng-container *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n              let rowIndex = index\">\n        <tr\n          (click)=\"onClick($event, row, '', null, rowIndex)\"\n          (contextmenu)=\"onRowContextMenu($event, row, '', null, rowIndex)\"\n          (dblclick)=\"onDoubleClick($event, row, '', null, rowIndex)\"\n          [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n          <ng-container\n            [ngTemplateOutlet]=\"rowTemplate\"\n            [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex }\">\n          </ng-container>\n          <td *ngIf=\"config.detailsTemplate\">\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <tr\n          *ngIf=\"(config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) || config.collapseAllRows\">\n          <td [attr.colspan]=\"columns.length + 1\">\n            <ng-container\n              [ngTemplateOutlet]=\"detailsTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex  }\">\n            </ng-container>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!rowTemplate && !config.groupRows\">\n      <ul class=\"ngx-table__table-row-context-menu\"\n          [ngStyle]=\"{'position': 'absolute', 'top': rowContextMenuPosition.top, 'left': rowContextMenuPosition.left }\"\n          *ngIf=\"rowContextMenuPosition.top\">\n        <ng-container\n          [ngTemplateOutlet]=\"rowContextMenu\"\n          [ngTemplateOutletContext]=\"{ $implicit: rowContextMenuPosition.value}\">\n        </ng-container>\n      </ul>\n      <ng-container\n        *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                  let rowIndex = index\">\n        <tr [class.ngx-table__table-row--selected]=\"rowIndex == selectedRow && !config.selectCell\">\n          <td *ngIf=\"config.checkboxes\">\n            <label class=\"ngx-form-checkbox\">\n              <input type=\"checkbox\"\n                     id=\"checkbox-{{rowIndex}}\"\n                     [checked]=\"isSelected\"\n                     (change)=\"onCheckboxSelect($event, row, rowIndex)\">\n              <i class=\"ngx-form-icon\"></i>\n            </label>\n          </td>\n          <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n            <td (click)=\"onClick($event, row, column.key, colIndex, rowIndex)\"\n                (contextmenu)=\"onRowContextMenu($event, row, column.key, colIndex, rowIndex)\"\n                (dblclick)=\"onDoubleClick($event, row, column.key, colIndex, rowIndex)\"\n                [class.ngx-table__table-col--selected]=\"colIndex == selectedCol && !config.selectCell\"\n                [class.ngx-table__table-cell--selected]=\"colIndex == selectedCol && rowIndex == selectedRow && !config.selectCol && !config.selectRow\"\n            >\n              <div *ngIf=\"!column.cellTemplate\">{{ row | render:column.key }}</div>\n              <ng-container\n                *ngIf=\"column.cellTemplate\"\n                [ngTemplateOutlet]=\"column.cellTemplate\"\n                [ngTemplateOutletContext]=\"{ $implicit: row, rowIndex: rowIndex }\">\n              </ng-container>\n            </td>\n          </ng-container>\n          <td *ngIf=\"config.additionalActions || config.detailsTemplate\">\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <tr\n          *ngIf=\"(config.detailsTemplate && selectedDetailsTemplateRowId.has(rowIndex)) || config.collapseAllRows\">\n          <td *ngIf=\"config.checkboxes\"></td>\n          <td [attr.colspan]=\"columns.length + 1\">\n            <ng-container\n              [ngTemplateOutlet]=\"detailsTemplate\"\n              [ngTemplateOutletContext]=\"{ $implicit: row, index: rowIndex }\">\n            </ng-container>\n          </td>\n        </tr>\n      </ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!rowTemplate && config.groupRows\">\n      <ng-container\n        *ngFor=\"let group of grouped | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id }; let rowIndex = index\">\n        <tr>\n          <ng-container *ngIf=\"!groupRowsHeaderTemplate\">\n            <td [attr.colspan]=\"columns.length\">\n              <div>{{group[0][groupRowsBy]}} ({{group.length}})</div>\n            </td>\n          </ng-container>\n          <ng-container\n            *ngIf=\"groupRowsHeaderTemplate\"\n            [ngTemplateOutlet]=\"groupRowsHeaderTemplate\"\n            [ngTemplateOutletContext]=\"{\n              total: group.length,\n              key: groupRowsBy,\n              value: group[0][groupRowsBy],\n              group: group,\n              index: rowIndex\n            }\">\n          </ng-container>\n          <td>\n            <span class=\"ngx-icon\"\n                  *ngIf=\"arrowDefinition\"\n                  [ngClass]=\"isRowCollapsed(rowIndex) ? 'ngx-icon-arrow-down' : 'ngx-icon-arrow-right'\"\n                  (click)=\"collapseRow(rowIndex)\">\n            </span>\n          </td>\n        </tr>\n        <ng-container *ngIf=\"selectedDetailsTemplateRowId.has(rowIndex)\">\n          <tr *ngFor=\"let row of group\">\n            <td *ngFor=\"let column of columns\">\n              {{ row | render:column.key }}\n              <!-- TODO allow users to add groupRowsTemplateRef -->\n            </td>\n            <td></td>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n    </tbody>\n    <tbody *ngIf=\"data && !config.isLoading && config.draggable\" cdkDropList (cdkDropListDropped)=\"onDrop($event)\">\n    <ng-container *ngIf=\"!rowTemplate && !config.groupRows\">\n      <ng-container\n        *ngFor=\"let row of data | sort:sortBy | search:term | global:globalSearchTerm | paginate: { itemsPerPage: limit, currentPage: page, totalItems: count, id: id };\n                  let rowIndex = index\">\n        <tr class=\"ngx-draggable-row\" cdkDrag>\n          <td *ngIf=\"config.checkboxes\">\n            <label class=\"ngx-form-checkbox\">\n              <input type=\"checkbox\"\n                     id=\"checkbox-draggable-{{rowIndex}}\"\n                     [checked]=\"isSelected\"\n                     (change)=\"onCheckboxSelect($event, row, rowIndex)\">\n              <i class=\"ngx-form-icon\"></i>\n            </label>\n          </td>\n          <ng-container *ngFor=\"let column of columns; let colIndex = index\">\n            <td (click)=\"onClick($event, row, column.key, colIndex, rowIndex)\"\n                (dblclick)=\"onDoubleClick($event, row, column.key, colIndex, rowIndex)\"\n                [class.ngx-table__table-col--selected]=\"colIndex == selectedCol && !config.selectCell\"\n                [class.ngx-table__table-cell--selected]=\"colIndex == selectedCol && rowIndex == selectedRow && !config.selectCol && !config.selectRow\"\n            >\n              <div>{{ row | render:column.key }}</div>\n            </td>\n          </ng-container>\n        </tr>\n      </ng-container>\n    </ng-container>\n    </tbody>\n    <tbody *ngIf=\"!isLoading && (!data || (data && data.length < 1))\">\n    <tr class=\"ngx-table__body-empty\">\n      <ng-container\n        *ngIf=\"noResultsTemplate\"\n        [ngTemplateOutlet]=\"noResultsTemplate\">\n      </ng-container>\n      <td [attr.colspan]=\"columns && columns.length + 1\" *ngIf=\"!noResultsTemplate\">\n        <div class=\"ngx-table__table-no-results\">\n          No results\n        </div>\n      </td>\n    </tr>\n    </tbody>\n    <tbody *ngIf=\"isLoading\">\n    <tr class=\"ngx-table__body-loading\">\n      <td [attr.colspan]=\"columns && columns.length + 1\">\n        <div [style.height]=\"loadingHeight\"\n             class=\"ngx-table__table-loader-wrapper\">\n          <div class=\"ngx-table__table-loader\"></div>\n        </div>\n      </td>\n    </tr>\n    </tbody>\n    <tfoot *ngIf=\"summaryTemplate\">\n    <tr>\n      <ng-container\n        [ngTemplateOutlet]=\"summaryTemplate\"\n        [ngTemplateOutletContext]=\"{ total: data.length, limit: limit, page: page  }\">\n      </ng-container>\n    </tr>\n    </tfoot>\n  </table>\n  <pagination\n    id=\"pagination\"\n    *ngIf=\"config.paginationEnabled\"\n    [id]=\"id\"\n    [config]=\"config\"\n    [pagination]=\"pagination\"\n    (updateRange)=\"onPagination($event)\">\n  </pagination>\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        /** @nocollapse */
        BaseComponent.ctorParameters = function () {
            return [
                { type: core.ChangeDetectorRef }
            ];
        };
        BaseComponent.propDecorators = {
            configuration: [{ type: core.Input, args: ['configuration',] }],
            api: [{ type: core.Input }],
            data: [{ type: core.Input }],
            pagination: [{ type: core.Input }],
            groupRowsBy: [{ type: core.Input }],
            toggleRowIndex: [{ type: core.Input }],
            detailsTemplate: [{ type: core.Input }],
            summaryTemplate: [{ type: core.Input }],
            groupRowsHeaderTemplate: [{ type: core.Input }],
            filtersTemplate: [{ type: core.Input }],
            selectAllTemplate: [{ type: core.Input }],
            noResultsTemplate: [{ type: core.Input }],
            rowContextMenu: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            event: [{ type: core.Output }],
            rowTemplate: [{ type: core.ContentChild, args: [core.TemplateRef,] }]
        };
        return BaseComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CsvExportComponent = /** @class */ (function () {
        function CsvExportComponent() {
        }
        /**
         * @return {?}
         */
        CsvExportComponent.prototype.exportCsv = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var data = this.data;
                /** @type {?} */
                var csvContent = 'data:text/csv;charset=utf-8,';
                /** @type {?} */
                var dataString = '';
                /** @type {?} */
                var x = [];
                /** @type {?} */
                var keys = Object.keys(this.data[0]);
                data.forEach(function (row, index) {
                    x[index] = [];
                    keys.forEach(function (i) {
                        if (row.hasOwnProperty(i)) {
                            if (typeof row[i] === 'object') {
                                row[i] = 'Object'; // so far just change object to "Object" string
                            }
                            x[index].push(row[i]);
                        }
                    });
                });
                csvContent += keys + '\n';
                x.forEach(function (row, index) {
                    dataString = row.join(',');
                    csvContent += index < data.length ? dataString + '\n' : dataString;
                });
                /** @type {?} */
                var encodedUri = encodeURI(csvContent);
                /** @type {?} */
                var link = document.createElement('a');
                link.setAttribute('href', encodedUri);
                link.setAttribute('download', 'my_data.csv');
                link.click();
            };
        CsvExportComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'app-csv-export',
                        template: "\n    <a (click)=\"exportCsv()\" class=\"ngx-menu-item\">\n      CSV export\n    </a>"
                    }] }
        ];
        CsvExportComponent.propDecorators = {
            data: [{ type: core.Input }]
        };
        return CsvExportComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalSearchComponent = /** @class */ (function () {
        function GlobalSearchComponent() {
            this.globalUpdate = new core.EventEmitter();
        }
        GlobalSearchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'global-search',
                        template: "<label for=\"search\">\n  <input type=\"text\"\n         id=\"search\"\n         class=\"ngx-table__header-search\"\n         #input\n         (input)=\"globalUpdate.emit({value: input.value})\"\n         placeholder=\"Search\"/>\n</label>\n"
                    }] }
        ];
        GlobalSearchComponent.propDecorators = {
            globalUpdate: [{ type: core.Output }]
        };
        return GlobalSearchComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HeaderComponent = /** @class */ (function () {
        function HeaderComponent() {
            this.update = new core.EventEmitter();
        }
        /**
         * @param {?} key
         * @return {?}
         */
        HeaderComponent.prototype.unifyKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return key.replace('.', '_');
            };
        HeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'table-header',
                        template: "<label for=\"search_{{ unifyKey(column.key) }}\">\n  <input type=\"text\"\n         id=\"search_{{ unifyKey(column.key) }}\"\n         aria-label=\"Search\"\n         placeholder=\"{{ column.placeholder ? column.placeholder : column.title }}\"\n         class=\"ngx-table__header-search\"\n         #input\n         (input)=\"update.emit({value: input.value, key: column.key})\"\n  >\n</label>\n"
                    }] }
        ];
        HeaderComponent.propDecorators = {
            column: [{ type: core.Input }],
            update: [{ type: core.Output }]
        };
        return HeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PaginationComponent = /** @class */ (function () {
        function PaginationComponent() {
            this.updateRange = new core.EventEmitter();
            this.ranges = [5, 10, 25, 50, 100];
            this.limit = ConfigService.config.rows;
            this.showRange = false;
        }
        /**
         * @param {?} page
         * @return {?}
         */
        PaginationComponent.prototype.onPageChange = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                this.updateRange.emit({
                    page: page,
                    limit: this.limit,
                });
            };
        /**
         * @param {?} limit
         * @return {?}
         */
        PaginationComponent.prototype.changeLimit = /**
         * @param {?} limit
         * @return {?}
         */
            function (limit) {
                this.showRange = !this.showRange;
                this.limit = limit;
                this.updateRange.emit({
                    page: 1,
                    limit: limit,
                });
            };
        PaginationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'pagination',
                        template: "<div class=\"ngx-pagination-wrapper\"\n     [class.ngx-table__table--dark-pagination-wrapper]=\"config.tableLayout.theme === 'dark'\">\n  <div class=\"ngx-pagination-steps\">\n    <pagination-controls\n      [class.ngx-pagination-style]=\"config.tableLayout.theme !== 'dark'\"\n      [class.ngx-table__table--dark-pagination]=\"config.tableLayout.theme === 'dark'\"\n      id=\"pagination-controls\"\n      [id]=\"id\"\n      [maxSize]=\"config.paginationMaxSize || 5\"\n      [previousLabel]=\"''\"\n      [nextLabel]=\"''\"\n      (pageChange)=\"onPageChange($event)\">\n    </pagination-controls>\n  </div>\n  <div class=\"ngx-pagination-range\"\n       [class.ngx-table__table--dark-pagination-range]=\"config.tableLayout.theme === 'dark'\"\n       *ngIf=\"config.paginationRangeEnabled\">\n    <div class=\"ngx-dropdown ngx-pagination-range-dropdown\"\n         [class.ngx-active]=\"showRange\"\n         id=\"rowAmount\">\n      <div class=\"ngx-btn-group\">\n        <div class=\"ngx-pagination-range-dropdown-button\"\n             (click)=\"showRange = !showRange\">\n          {{limit}} <i class=\"ngx-icon ngx-icon-arrow-down\"></i>\n        </div>\n        <ul class=\"ngx-menu\">\n          <li class=\"ngx-pagination-range-dropdown-button-item\"\n              (click)=\"changeLimit(limit)\"\n              *ngFor=\"let limit of ranges\">\n            <span>{{limit}}</span>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </div>\n\n</div>\n",
                        changeDetection: core.ChangeDetectionStrategy.OnPush
                    }] }
        ];
        PaginationComponent.propDecorators = {
            pagination: [{ type: core.Input }],
            config: [{ type: core.Input }],
            id: [{ type: core.Input }],
            updateRange: [{ type: core.Output }]
        };
        return PaginationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GlobalSearchPipe = /** @class */ (function () {
        function GlobalSearchPipe() {
        }
        /**
         * @param {?} dataArr
         * @param {?=} filter
         * @return {?}
         */
        GlobalSearchPipe.prototype.transform = /**
         * @param {?} dataArr
         * @param {?=} filter
         * @return {?}
         */
            function (dataArr, filter) {
                if (typeof dataArr === 'undefined') {
                    return;
                }
                if (typeof filter === 'undefined' || Object.keys(filter).length === 0 || filter === '') {
                    return dataArr;
                }
                return dataArr.filter(function (row) {
                    /** @type {?} */
                    var element = JSON.stringify(Object.values(row));
                    return element.toLocaleLowerCase().indexOf(filter.value.toLocaleLowerCase()) !== -1;
                });
            };
        GlobalSearchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'global',
                    },] }
        ];
        return GlobalSearchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FiltersService = /** @class */ (function () {
        function FiltersService() {
        }
        /**
         * @param {?} p
         * @param {?} o
         * @return {?}
         */
        FiltersService.getPath = /**
         * @param {?} p
         * @param {?} o
         * @return {?}
         */
            function (p, o) {
                // https://github.com/dherges/ng-packagr/issues/696
                /* tslint:disable-next-line */
                /** @type {?} */
                var result = p.reduce(function (xs, x) { return (xs && typeof xs[x] !== 'undefined') ? xs[x] : null; }, o);
                return result;
            };
        FiltersService.decorators = [
            { type: core.Injectable }
        ];
        return FiltersService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RenderPipe = /** @class */ (function () {
        function RenderPipe() {
        }
        /**
         * @param {?} row
         * @param {?} key
         * @return {?}
         */
        RenderPipe.prototype.transform = /**
         * @param {?} row
         * @param {?} key
         * @return {?}
         */
            function (row, key) {
                /** @type {?} */
                var split = key.split('.');
                return FiltersService.getPath(split, row);
            };
        RenderPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'render',
                    },] }
        ];
        return RenderPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchPipe = /** @class */ (function () {
        function SearchPipe() {
            this.filters = {};
        }
        /**
         * @param {?} array
         * @param {?=} filter
         * @return {?}
         */
        SearchPipe.prototype.transform = /**
         * @param {?} array
         * @param {?=} filter
         * @return {?}
         */
            function (array, filter) {
                var _this = this;
                if (typeof array === 'undefined') {
                    return;
                }
                if (typeof filter === 'undefined') {
                    return array;
                }
                this.filters[filter.key] = filter.value.toString().toLocaleLowerCase();
                if (Object.keys(filter).length === 0 || filter.value === '') {
                    delete this.filters[filter.key];
                }
                return array.filter(function (obj) {
                    return Object.keys(_this.filters)
                        .every(function (c) {
                        /** @type {?} */
                        var split = c.split('.');
                        /** @type {?} */
                        var val = FiltersService.getPath(split, obj);
                        /** @type {?} */
                        var element = (typeof val === 'object') ? JSON.stringify(val) : val.toString().toLocaleLowerCase();
                        return element.indexOf(_this.filters[c]) > -1;
                    });
                });
            };
        SearchPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'search',
                    },] }
        ];
        return SearchPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SortPipe = /** @class */ (function () {
        function SortPipe() {
        }
        /**
         * @private
         * @param {?} aV
         * @param {?} bV
         * @return {?}
         */
        SortPipe.isNaN = /**
         * @private
         * @param {?} aV
         * @param {?} bV
         * @return {?}
         */
            function (aV, bV) {
                return (isNaN(parseFloat(aV)) || !isFinite(aV)) || (isNaN(parseFloat(bV)) || !isFinite(bV));
            };
        /**
         * @private
         * @param {?} a
         * @param {?} b
         * @param {?} key
         * @return {?}
         */
        SortPipe.compare = /**
         * @private
         * @param {?} a
         * @param {?} b
         * @param {?} key
         * @return {?}
         */
            function (a, b, key) {
                /** @type {?} */
                var split = key.split('.');
                /** @type {?} */
                var aPath = FiltersService.getPath(split, a);
                /** @type {?} */
                var bPath = FiltersService.getPath(split, b);
                /** @type {?} */
                var aValue = (aPath + '').toLowerCase();
                /** @type {?} */
                var bValue = (bPath + '').toLowerCase();
                if (SortPipe.isNaN(aPath, bPath)) {
                    return aValue.localeCompare(bValue);
                }
                else {
                    if (parseFloat(aPath) < parseFloat(bPath)) {
                        return -1;
                    }
                    if (parseFloat(aPath) > parseFloat(bPath)) {
                        return 1;
                    }
                }
                return 0;
            };
        /**
         * @param {?} value
         * @param {?} args
         * @return {?}
         */
        SortPipe.prototype.transform = /**
         * @param {?} value
         * @param {?} args
         * @return {?}
         */
            function (value, args) {
                if (!args.key || args.key === '') {
                    return value;
                }
                if (args.order === 'asc') {
                    return value.sort(function (a, b) { return SortPipe.compare(a, b, args.key); });
                }
                else {
                    return value.sort(function (a, b) { return SortPipe.compare(b, a, args.key); });
                }
            };
        SortPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'sort',
                    },] }
        ];
        return SortPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseModule = /** @class */ (function () {
        function BaseModule() {
        }
        BaseModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            BaseComponent,
                            GlobalSearchComponent,
                            CsvExportComponent,
                            HeaderComponent,
                            PaginationComponent,
                            SearchPipe,
                            RenderPipe,
                            GlobalSearchPipe,
                            SortPipe,
                        ],
                        imports: [
                            common.CommonModule,
                            ngxPagination.NgxPaginationModule,
                            dragDrop.DragDropModule,
                        ],
                        exports: [BaseComponent],
                    },] }
        ];
        return BaseModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TableModule = /** @class */ (function () {
        function TableModule() {
        }
        TableModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            BaseModule,
                        ],
                        bootstrap: [BaseComponent],
                        exports: [BaseComponent],
                        providers: [],
                    },] }
        ];
        return TableModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TableModule = TableModule;
    exports.STYLE = STYLE;
    exports.THEME = THEME;
    exports.Event = Event;
    exports.ɵb = BaseComponent;
    exports.ɵa = BaseModule;
    exports.ɵf = CsvExportComponent;
    exports.ɵe = GlobalSearchComponent;
    exports.ɵg = HeaderComponent;
    exports.ɵh = PaginationComponent;
    exports.ɵk = GlobalSearchPipe;
    exports.ɵj = RenderPipe;
    exports.ɵi = SearchPipe;
    exports.ɵl = SortPipe;
    exports.ɵc = ConfigService;
    exports.ɵd = UtilsService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-easy-table.umd.js.map