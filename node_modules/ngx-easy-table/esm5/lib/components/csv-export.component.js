/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
var CsvExportComponent = /** @class */ (function () {
    function CsvExportComponent() {
    }
    /**
     * @return {?}
     */
    CsvExportComponent.prototype.exportCsv = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var data = this.data;
        /** @type {?} */
        var csvContent = 'data:text/csv;charset=utf-8,';
        /** @type {?} */
        var dataString = '';
        /** @type {?} */
        var x = [];
        /** @type {?} */
        var keys = Object.keys(this.data[0]);
        data.forEach(function (row, index) {
            x[index] = [];
            keys.forEach(function (i) {
                if (row.hasOwnProperty(i)) {
                    if (typeof row[i] === 'object') {
                        row[i] = 'Object'; // so far just change object to "Object" string
                    }
                    x[index].push(row[i]);
                }
            });
        });
        csvContent += keys + '\n';
        x.forEach(function (row, index) {
            dataString = row.join(',');
            csvContent += index < data.length ? dataString + '\n' : dataString;
        });
        /** @type {?} */
        var encodedUri = encodeURI(csvContent);
        /** @type {?} */
        var link = document.createElement('a');
        link.setAttribute('href', encodedUri);
        link.setAttribute('download', 'my_data.csv');
        link.click();
    };
    CsvExportComponent.decorators = [
        { type: Component, args: [{
                    selector: 'app-csv-export',
                    template: "\n    <a (click)=\"exportCsv()\" class=\"ngx-menu-item\">\n      CSV export\n    </a>"
                }] }
    ];
    CsvExportComponent.propDecorators = {
        data: [{ type: Input }]
    };
    return CsvExportComponent;
}());
export { CsvExportComponent };
if (false) {
    /** @type {?} */
    CsvExportComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3N2LWV4cG9ydC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Nzdi1leHBvcnQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRDtJQUFBO0lBNkNBLENBQUM7Ozs7SUE5QlEsc0NBQVM7OztJQUFoQjs7WUFDUSxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUk7O1lBQ2xCLFVBQVUsR0FBRyw4QkFBOEI7O1lBQzNDLFVBQVUsR0FBRyxFQUFFOztZQUNiLENBQUMsR0FBVSxFQUFFOztZQUNiLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUcsRUFBRSxLQUFLO1lBQ3RCLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQztnQkFDYixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3pCLElBQUksT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO3dCQUM5QixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsK0NBQStDO3FCQUNuRTtvQkFDRCxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN2QjtZQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxVQUFVLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUMxQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsR0FBRyxFQUFFLEtBQUs7WUFDbkIsVUFBVSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDM0IsVUFBVSxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7O1lBQ0csVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUM7O1lBQ2xDLElBQUksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQztRQUN4QyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDZixDQUFDOztnQkE1Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFFBQVEsRUFBRSx1RkFHSDtpQkFDUjs7O3VCQU9FLEtBQUs7O0lBZ0NSLHlCQUFDO0NBQUEsQUE3Q0QsSUE2Q0M7U0FqQ1ksa0JBQWtCOzs7SUFDN0Isa0NBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1jc3YtZXhwb3J0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8YSAoY2xpY2spPVwiZXhwb3J0Q3N2KClcIiBjbGFzcz1cIm5neC1tZW51LWl0ZW1cIj5cbiAgICAgIENTViBleHBvcnRcbiAgICA8L2E+YCxcbn0pXG5cbi8qKlxuICogRnJvbSB2ZXJzaW9uIDUuMCBDc3ZFeHBvcnRDb21wb25lbnQgd2lsbCBiZSBkZXByZWNhdGVkLFxuICogYW5kIGZyb20gdmVyc2lvbiA2LjAgbW92ZWQgdG8gQ3N2RXhwb3J0Q29tcG9uZW50IHBsdWdpblxuICovXG5leHBvcnQgY2xhc3MgQ3N2RXhwb3J0Q29tcG9uZW50IHtcbiAgQElucHV0KCkgZGF0YTtcblxuICBwdWJsaWMgZXhwb3J0Q3N2KCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgbGV0IGNzdkNvbnRlbnQgPSAnZGF0YTp0ZXh0L2NzdjtjaGFyc2V0PXV0Zi04LCc7XG4gICAgbGV0IGRhdGFTdHJpbmcgPSAnJztcbiAgICBjb25zdCB4OiBhbnlbXSA9IFtdO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGFbMF0pO1xuICAgIGRhdGEuZm9yRWFjaCgocm93LCBpbmRleCkgPT4ge1xuICAgICAgeFtpbmRleF0gPSBbXTtcbiAgICAgIGtleXMuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgICBpZiAocm93Lmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByb3dbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByb3dbaV0gPSAnT2JqZWN0JzsgLy8gc28gZmFyIGp1c3QgY2hhbmdlIG9iamVjdCB0byBcIk9iamVjdFwiIHN0cmluZ1xuICAgICAgICAgIH1cbiAgICAgICAgICB4W2luZGV4XS5wdXNoKHJvd1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgY3N2Q29udGVudCArPSBrZXlzICsgJ1xcbic7XG4gICAgeC5mb3JFYWNoKChyb3csIGluZGV4KSA9PiB7XG4gICAgICBkYXRhU3RyaW5nID0gcm93LmpvaW4oJywnKTtcbiAgICAgIGNzdkNvbnRlbnQgKz0gaW5kZXggPCBkYXRhLmxlbmd0aCA/IGRhdGFTdHJpbmcgKyAnXFxuJyA6IGRhdGFTdHJpbmc7XG4gICAgfSk7XG4gICAgY29uc3QgZW5jb2RlZFVyaSA9IGVuY29kZVVSSShjc3ZDb250ZW50KTtcbiAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgZW5jb2RlZFVyaSk7XG4gICAgbGluay5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ215X2RhdGEuY3N2Jyk7XG5cbiAgICBsaW5rLmNsaWNrKCk7XG4gIH1cbn1cbiJdfQ==