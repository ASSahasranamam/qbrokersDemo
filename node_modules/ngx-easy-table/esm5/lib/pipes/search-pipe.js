/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { FiltersService } from '../services/filters.service';
var SearchPipe = /** @class */ (function () {
    function SearchPipe() {
        this.filters = {};
    }
    /**
     * @param {?} array
     * @param {?=} filter
     * @return {?}
     */
    SearchPipe.prototype.transform = /**
     * @param {?} array
     * @param {?=} filter
     * @return {?}
     */
    function (array, filter) {
        var _this = this;
        if (typeof array === 'undefined') {
            return;
        }
        if (typeof filter === 'undefined') {
            return array;
        }
        this.filters[filter.key] = filter.value.toString().toLocaleLowerCase();
        if (Object.keys(filter).length === 0 || filter.value === '') {
            delete this.filters[filter.key];
        }
        return array.filter(function (obj) {
            return Object.keys(_this.filters)
                .every(function (c) {
                /** @type {?} */
                var split = c.split('.');
                /** @type {?} */
                var val = FiltersService.getPath(split, obj);
                /** @type {?} */
                var element = (typeof val === 'object') ? JSON.stringify(val) : val.toString().toLocaleLowerCase();
                return element.indexOf(_this.filters[c]) > -1;
            });
        });
    };
    SearchPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'search',
                },] }
    ];
    return SearchPipe;
}());
export { SearchPipe };
if (false) {
    /** @type {?} */
    SearchPipe.prototype.filters;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtZWFzeS10YWJsZS8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9zZWFyY2gtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTdEO0lBQUE7UUFLRSxZQUFPLEdBQThCLEVBQUUsQ0FBQztJQXVCMUMsQ0FBQzs7Ozs7O0lBckJDLDhCQUFTOzs7OztJQUFULFVBQVUsS0FBWSxFQUFFLE1BQXVDO1FBQS9ELGlCQW9CQztRQW5CQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFdBQVcsRUFBRTtZQUNoQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ3ZFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLEtBQUssRUFBRSxFQUFFO1lBQzNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDakM7UUFDRCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQyxHQUFHO1lBQ3RCLE9BQU8sTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDO2lCQUM3QixLQUFLLENBQUMsVUFBQyxDQUFDOztvQkFDRCxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O29CQUNwQixHQUFHLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDOztvQkFDeEMsT0FBTyxHQUFHLENBQUMsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDcEcsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBM0JGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsUUFBUTtpQkFDZjs7SUEwQkQsaUJBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQXhCWSxVQUFVOzs7SUFDckIsNkJBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRmlsdGVyc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9maWx0ZXJzLnNlcnZpY2UnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdzZWFyY2gnLFxufSlcblxuZXhwb3J0IGNsYXNzIFNlYXJjaFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgZmlsdGVyczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuXG4gIHRyYW5zZm9ybShhcnJheTogYW55W10sIGZpbHRlcj86IHsgdmFsdWU6IHN0cmluZywga2V5OiBzdHJpbmcgfSk6IGFueVtdIHtcbiAgICBpZiAodHlwZW9mIGFycmF5ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGZpbHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG4gICAgdGhpcy5maWx0ZXJzW2ZpbHRlci5rZXldID0gZmlsdGVyLnZhbHVlLnRvU3RyaW5nKCkudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICBpZiAoT2JqZWN0LmtleXMoZmlsdGVyKS5sZW5ndGggPT09IDAgfHwgZmlsdGVyLnZhbHVlID09PSAnJykge1xuICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyc1tmaWx0ZXIua2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigob2JqKSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5maWx0ZXJzKVxuICAgICAgICAuZXZlcnkoKGMpID0+IHtcbiAgICAgICAgICBjb25zdCBzcGxpdCA9IGMuc3BsaXQoJy4nKTtcbiAgICAgICAgICBjb25zdCB2YWwgPSBGaWx0ZXJzU2VydmljZS5nZXRQYXRoKHNwbGl0LCBvYmopO1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpID8gSlNPTi5zdHJpbmdpZnkodmFsKSA6IHZhbC50b1N0cmluZygpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnQuaW5kZXhPZih0aGlzLmZpbHRlcnNbY10pID4gLTE7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iXX0=